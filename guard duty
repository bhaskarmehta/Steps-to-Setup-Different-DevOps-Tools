 cat main.tf
provider "aws" {
  region = "ap-south-1"  # Change to your AWS region
}

# Fetch existing GuardDuty detector (Avoids duplicate errors)
data "aws_guardduty_detector" "existing" {}

# Allow GuardDuty to store logs in S3
resource "aws_guardduty_publishing_destination" "publishing_dest" {
  detector_id      = data.aws_guardduty_detector.existing.id
  destination_arn  = "arn:aws:s3:::amnbucket12345"
  destination_type = "S3"
  kms_key_arn      = aws_kms_key.guardduty_kms.arn
}

# Enable GuardDuty for the organization (Fixed boolean issue)
resource "aws_guardduty_organization_configuration" "org_config" {
  detector_id                      = data.aws_guardduty_detector.existing.id
  auto_enable_organization_members = "ALL"  # Fixed: Expecting boolean, not a string
}

# Assign admin for GuardDuty in AWS Organization
resource "aws_guardduty_organization_admin_account" "admin" {
  admin_account_id = var.aws_account_id
}

# Create KMS key for encrypting GuardDuty logs (Fixed policy issue)
resource "aws_kms_key" "guardduty_kms" {
  description             = "GuardDuty KMS Key"
  deletion_window_in_days = 10

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "EnableAccountRootAccess"
        Effect    = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${var.aws_account_id}:root"
        }
        Action    = "kms:*"
        Resource  = "*"
      },
      {
        Sid    = "AllowGuardDutyAccess"
        Effect = "Allow"
        Principal = {
          Service = "guardduty.amazonaws.com"
        }
        Action = [
          "kms:GenerateDataKey",
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:DescribeKey"
        ]
        Resource = "*"
      }
    ]
  })
}

# Create an alias for the KMS key
resource "aws_kms_alias" "guardduty_kms_alias" {
  name          = "alias/guardduty"
  target_key_id = aws_kms_key.guardduty_kms.id
}

# S3 bucket policy to allow GuardDuty to write findings
resource "aws_s3_bucket_policy" "guardduty_s3_policy" {
  bucket = var.guardduty_bucket

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "guardduty.amazonaws.com"
        }
        Action = [
          "s3:GetBucketLocation",
          "s3:PutObject"
        ]
        Resource = [
          "arn:aws:s3:::${var.guardduty_bucket}",
          "arn:aws:s3:::${var.guardduty_bucket}/*"
        ]
      }
    ]
  })
}



 aws guardduty update-detector --detector-id c2cac24693f970700ef66d27e70388b5 --data-sources S3Logs="{Enable=true}"
aws guardduty get-detector --detector-id c2cac24693f970700ef66d27e70388b5 --query "DataSources.S3Logs"           {
    "Status": "ENABLED"
}

 cat outputs.tf
output "guardduty_detector_id" {
  description = "GuardDuty Detector ID"
  value       = data.aws_guardduty_detector.existing.id  # âœ… Use existing detector
}

output "kms_key_arn" {
  description = "KMS Key ARN used for GuardDuty encryption"
  value       = aws_kms_key.guardduty_kms.arn
}

output "s3_bucket_name" {
  description = "S3 bucket used for storing GuardDuty logs"
  value       = var.guardduty_bucket
}



 cat variables.tf
variable "aws_region" {
  description = "AWS Region where GuardDuty is enabled"
  type        = string
  default     = "ap-south-1"
}

variable "aws_account_id" {
  description = "AWS Account ID of the GuardDuty Admin"
  type        = string
  default     = "629884197199"  # Change to your AWS Account ID
}

variable "guardduty_bucket" {
  description = "S3 bucket for GuardDuty logs"
  type        = string
  default     = "amnbucket12345"  # Change to your bucket name
}

