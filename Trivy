Install Trivy in Ubuntu Server or Inside a Jenkins Server

sudo apt-get install wget apt-transport-https gnupg lsb-release
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy


Now to Get the report in HTML format
========================================
mkdir -p contrib
curl -o contrib/html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl


And then report will be generated as - trivy image --format template --template "@contrib/html.tpl" -o report.html python:3.4-alpine

And In Jenkinsfile we can use as
stage('Filesystem Scan with Trivy') {
            steps {
                script {
                    // Scan filesystem for vulnerabilities
                    sh '''
                        trivy fs \
                            --severity HIGH,CRITICAL \
                            --format template \
                            --template "@contrib/html.tpl" \  (or) --template "@/contrib/html.tpl" -  If contrib/html.tpl is at root (/) location
                            -o trivy-fs-report.html \
                            .
                    '''
                }
            }
        }

OWASP vs Trivy
======================
Data Sources
-----------
Trivy = GHSA (GitHub Advisory Database) + NVD + distro security feeds(Red Hat, Debian, Alpine - Operating-system package advisories maintained by vendors).

OWASP = Mostly NVD (CPE-based- Common Platform Enumeration).

Matching Approach
---------------
Trivy = Matches exact package coordinates, more accurate.
-> If Project has spring-core-5.3.30.jar.
-> If a CVE only affects spring-core < 5.3.18, Trivy won’t flag your 5.3.30 version.

OWASP = Uses CPE names, so sometimes matches too broadly (false positives).
-> False Positive - A false positive is when the scanner reports a vulnerability that doesn’t actually affect your project.
-> OWASP mainly uses CPE (Common Platform Enumeration) strings to match libraries against vulnerabilities in the NVD (National Vulnerability Database).

Example:
  Project has spring-core-5.3.30.jar.
  NVD lists a vulnerability for spring-core-5.3.0.
  Dependency-Check may wrongly assume all 5.3.x versions are affected → false positive.

Update Frequency
-----------------
Trivy DB updates every 6 hours.

OWASP relies on NVD feeds (sometimes slower to reflect new CVEs).




Veracode Alternative
---------------------

Veracode Module                   Open Source Alternative          How it Complements Trivy
----------------                   ------------------------        ------------------------
SCA (Static Code Analysis)           Trivy                           Use trivy fs /path/to/your/code to scan for vulnerable dependencies. This directly replaces Veracode SCA.
Container Security                   Trivy                           Use trivy image your-image:tag to scan container images. This directly replaces Veracode's container scanning.
SAST - (for App Code)-               Semgrep or SonarQube            Use Sonarqube to scan your custom application code for security flaws. This fills the biggest gap that Trivy leaves.
(Static Application Security Testing)
SAST (for IaC)                       Trivy                           Use trivy config /path/to/your/iac to scan Kubernetes, Terraform, etc. files. This is part of Veracode's offering.
DAST                                 OWASP ZAP                       Use ZAP to run automated scans against your running web applications. This replaces Veracode DAST.


SAST stands for Static Application Security Testing - 
------------------------------------------------------
It is a type of security testing that analyzes an application's source code, bytecode, or binary code for security vulnerabilities without actually executing the program. It examines the application 
from the inside-out while it is "at rest."

DAST stands for Dynamic Application Security Testing - 
------------------------------------------------------
It's a type of security testing where you analyze a running, live application from the outside-in by simulating attacks against it. Its primary goal is to find vulnerabilities that an external hacker could exploit.
