Install Terragrunt in ubuntu
-------------------------------
wget https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_amd64
chmod +x terragrunt_linux_amd64
sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
terragrunt --version




1) Create a module
--------------------

main.tf
-------
# Step 1: Check if the IAM user already exists
data "aws_iam_user" "existing" {
  for_each  = toset(var.user_names)
  user_name = each.key
}

# Step 2: Create user only if it doesn't exist
resource "aws_iam_user" "new_user" {
  for_each = { for k, v in data.aws_iam_user.existing : k => v if v.id == null }
  name     = each.key

  lifecycle {
    ignore_changes = [name]
  }
}

# Step 3: Create the IAM group
resource "aws_iam_group" "this" {
  name = var.group_name
}

# Step 4: Combine existing and new users
resource "aws_iam_group_membership" "this" {
  name  = "${var.group_name}-membership"
  group = aws_iam_group.this.name
  users = concat(
    [for k, v in data.aws_iam_user.existing : k if v.id != null],  # Add existing users
    [for k, v in aws_iam_user.new_user : k]  # Add newly created users
  )
}

# Step 5: Attach the policy to the group
resource "aws_iam_group_policy_attachment" "this" {
  group      = aws_iam_group.this.name
  policy_arn = var.policy_arn
}

# Step 5: Attach multiple policies to the group dynamically
resource "aws_iam_group_policy_attachment" "this" {
  for_each  = toset(var.policy_arns)
  group     = aws_iam_group.this.name
  policy_arn = each.value
}


variables.tf
-----------------
variable "group_name" {
  description = "Name of the IAM group"
  type        = string
}

variable "user_names" {
  description = "List of IAM users to add to the group"
  type        = list(string)
}

variable "policy_arn" {
  description = "The ARN of the IAM policy to attach to the group"
  type        = list(string)
}



Now in terragrunt
--------------------
terragrunt.hcl
include {
  path = find_in_parent_folders()
}

inputs = {
  group_name = "dev-group"
  user_names = ["user1", "user2"]
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}

For multiple Policies
--------------------------
inputs = {
  group_name = "dev-group"
  user_names = ["user1", "user2"]
  policy_arn = [
                "arn:aws:iam::aws:policy/AdministratorAccess",
                 "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
              ]
}



Attaching role to group
-------------------------

variable.tf
-------------------
variable "group_name" {
  description = "Name of the IAM group"
  type        = string
}

variable "user_names" {
  description = "List of IAM users to add to the group"
  type        = list(string)
}

variable "policy_arns" {
  description = "List of IAM policy ARNs to attach to the role"
  type        = list(string)
}

variable "role_name" {
  description = "Name of the IAM role"
  type        = string
}


main.tf
---------

# Step 1: Create IAM group
resource "aws_iam_group" "this" {
  name = var.group_name
}

# Step 2: Create IAM users if they don't exist and add them to the group
resource "aws_iam_user" "this" {
  for_each = toset(var.user_names)
  name     = each.key
}

resource "aws_iam_group_membership" "this" {
  name  = "${var.group_name}-membership"
  group = aws_iam_group.this.name
  users = var.user_names
}

# Step 3: Create IAM role
resource "aws_iam_role" "this" {
  name = var.role_name

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          AWS = aws_iam_group.this.arn
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Step 4: Attach multiple policies to the IAM role
resource "aws_iam_role_policy_attachment" "this" {
  for_each   = toset(var.policy_arns)
  role       = aws_iam_role.this.name
  policy_arn = each.value
}

# Step 5: Attach the role to the group (indirect via assume role permissions)
resource "aws_iam_policy" "group_assume_role_policy" {
  name        = "GroupAssumeRolePolicy-${var.group_name}"
  description = "Policy to allow group to assume IAM role"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = "sts:AssumeRole"
        Resource = aws_iam_role.this.arn
      }
    ]
  })
}

resource "aws_iam_group_policy_attachment" "group_assume_role_attachment" {
  group      = aws_iam_group.this.name
  policy_arn = aws_iam_policy.group_assume_role_policy.arn
}


terragrunt.hcl
----------------

include {
  path = find_in_parent_folders()
}

inputs = {
  group_name  = "dev-group"
  user_names  = ["bhaskar", "Devops-yash"]
  policy_arns = [
    "arn:aws:iam::aws:policy/AdministratorAccess",
    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
  ]
  role_name   = "dev-role"
}



root.hcl
--------------

terraform {
  source = "../aws-iam-group-module"
}

inputs = {
  group_name = "default-group"
  user_names = []
  policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess"  # Default value to avoid empty
}


new main.tf
------------
# Step 1: Check if the IAM user already exists
data "aws_iam_user" "existing_users" {
  for_each  = toset(var.user_names)
  user_name = each.key
}

# Step 2: Create new users only if they do not exist
resource "aws_iam_user" "new_users" {
  for_each = { for user, details in data.aws_iam_user.existing_users : user => details if details.id == null }
  name     = each.key

  lifecycle {
    ignore_changes = [name]
  }
}

# Step 3: Create the IAM group
resource "aws_iam_group" "this" {
  name = var.group_name
}

# Step 4: Add both existing and new users to the IAM group
resource "aws_iam_group_membership" "this" {
  name  = "${var.group_name}-membership"
  group = aws_iam_group.this.name
  users = concat(
    [for user, details in data.aws_iam_user.existing_users : user if details.id != null],  # Add existing users
    [for user in aws_iam_user.new_users : user]  # Add newly created users
  )
}

# Step 5: Create IAM role with an assume role policy for the group
resource "aws_iam_role" "this" {
  name = var.role_name

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          AWS = aws_iam_group.this.arn
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Step 6: Attach multiple policies to the IAM role
resource "aws_iam_role_policy_attachment" "this" {
  for_each   = toset(var.policy_arns)
  role       = aws_iam_role.this.name
  policy_arn = each.value
}

# Step 7: Attach assume-role permission to the IAM group
resource "aws_iam_policy" "group_assume_role_policy" {
  name        = "GroupAssumeRolePolicy-${var.group_name}"
  description = "Policy to allow group to assume IAM role"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = "sts:AssumeRole"
        Resource = aws_iam_role.this.arn
      }
    ]
  })
}

resource "aws_iam_group_policy_attachment" "group_assume_role_attachment" {
  group      = aws_iam_group.this.name
  policy_arn = aws_iam_policy.group_assume_role_policy.arn
}
