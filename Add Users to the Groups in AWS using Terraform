1) Create a module
--------------------

main.tf
-------
# Step 1: Check if the IAM user already exists
data "aws_iam_user" "existing" {
  for_each  = toset(var.user_names)
  user_name = each.key
}

# Step 2: Create user only if it doesn't exist
resource "aws_iam_user" "new_user" {
  for_each = { for k, v in data.aws_iam_user.existing : k => v if v.id == null }
  name     = each.key

  lifecycle {
    ignore_changes = [name]
  }
}

# Step 3: Create the IAM group
resource "aws_iam_group" "this" {
  name = var.group_name
}

# Step 4: Combine existing and new users
resource "aws_iam_group_membership" "this" {
  name  = "${var.group_name}-membership"
  group = aws_iam_group.this.name
  users = concat(
    [for k, v in data.aws_iam_user.existing : k if v.id != null],  # Add existing users
    [for k, v in aws_iam_user.new_user : k]  # Add newly created users
  )
}

# Step 5: Attach the policy to the group
resource "aws_iam_group_policy_attachment" "this" {
  group      = aws_iam_group.this.name
  policy_arn = var.policy_arn
}


variables.tf
-----------------
variable "group_name" {
  description = "Name of the IAM group"
  type        = string
}

variable "user_names" {
  description = "List of IAM users to add to the group"
  type        = list(string)
}

variable "policy_arn" {
  description = "The ARN of the IAM policy to attach to the group"
  type        = string
}



Now in terragrunt
--------------------
terragrunt.hcl
include {
  path = find_in_parent_folders()
}

inputs = {
  group_name = "dev-group"
  user_names = ["user1", "user2"]
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}

